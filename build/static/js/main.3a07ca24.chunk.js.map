{"version":3,"sources":["pages/StartScreen/StartScreen.tsx","images/left-arrow.svg","components/PreviousPage/PreviousPage.tsx","components/Contact/Contact.tsx","pages/Contacts/Contacts.tsx","pages/NewContact/NewContact.tsx","pages/SendMoney/SendMoney.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StartScreen","className","src","alt","to","type","PreviousPage","HeaderTitle","leftArrow","Contact","name","addButton","ID","undefined","myArr","split","str","forEach","element","substring","toUpperCase","getPhotoName","Contacts","counter","React","useState","people","setpeople","storedPeople","JSON","parse","localStorage","getItem","useEffect","length","map","person","index","num","returnPerson","NewContact","form_name","setname","form_EthID","setEthID","action","placeholder","onChange","e","target","value","onClick","Event","event","preventDefault","push","etherID","setItem","stringify","saveContact","SendMoney","id","useParams","console","log","parseInt","href","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a07ca24.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./StartScreen.scss\";\r\n\r\ninterface Props { }\r\n\r\n// The Start Screen\r\nexport default function StartScreen({ }: Props): ReactElement {\r\n  return (\r\n    <>\r\n      <div className=\"page\">\r\n        <h1 className=\"page__title\">Crypto address book</h1>\r\n        <img src=\"landingImage.png\" alt=\"Logo image of the Sylo Smart Wallet Fox.\" />\r\n        <p className=\"page__paragraph\">The easiest and quickest way to mange and  pay your contacts.\r\n          Connect your wallet to begin.</p>\r\n        <Link className=\"button button__orange\" to=\"/contacts\" type=\"button\">Connect Wallet</Link>\r\n      </div>\r\n      </>\r\n      );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/left-arrow.9bc30557.svg\";","import React, { ReactElement } from 'react';\r\nimport \"./PreviousPage.scss\";\r\nimport {\r\n\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nimport leftArrow from \"../../images/left-arrow.svg\"\r\n\r\ninterface PreviousPageProps {\r\n    HeaderTitle: string,\r\n    to: string,\r\n\r\n}\r\n\r\n\r\n\r\nexport default function PreviousPage({ HeaderTitle, to }: PreviousPageProps): ReactElement {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__container\">\r\n                <Link className=\"header__previous\" to={to}><img src={leftArrow} alt=\"Arrow pointing left meaning return to the previous page.\" /></Link>\r\n                <h1 className=\"header__title\">{HeaderTitle}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport \"./Contact.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\ninterface ContactProps {\r\n    ID?: number,\r\n    name: String,\r\n    addButton?: boolean,\r\n}\r\n\r\nexport default function Contact({ name, addButton, ID }: ContactProps): ReactElement {\r\n\r\n    function getPhotoName({ name }: ContactProps) {\r\n        let myArr; \r\n        try {\r\n            myArr = name.split(\" \");\r\n        } catch {\r\n            return;\r\n        }\r\n        let str: string = \"\";\r\n        myArr.forEach(element => {\r\n            str += element.substring(0, 1).toUpperCase() + \" \";\r\n        });\r\n\r\n        return str;\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            {addButton == true &&\r\n                <Link to=\"/newcontact\" className=\"clean\">\r\n                    <div className=\"contact\">\r\n                        <div className=\"contact__row\">\r\n                            <div className=\"contact__plus\"><img src=\"plus-icon.svg\" alt=\"add new contact icon and button\" /></div>\r\n                            <div className=\"contact__name contact--alternative-text\">{name}</div>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n\r\n\r\n            }\r\n\r\n            {addButton == undefined && \r\n            <Link to={'/sendmoney/' + ID} >\r\n                <div className=\"contact\">\r\n                    <div className=\"contact__row\">\r\n                        <div className=\"contact__photo\">{getPhotoName({ name })}</div>\r\n                        <div className=\"contact__name\">{name}</div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport \"./Contacts.scss\";\r\nimport PreviousPage from \"../../components/PreviousPage/PreviousPage\";\r\nimport Contact from \"../../components/Contact/Contact\";\r\n\r\ninterface Props { }\r\n\r\ninterface Person {\r\n  name: string,\r\n  etherID: string,\r\n}\r\n\r\n// To handle all things contacts related\r\nexport default function Contacts({ }: Props): ReactElement {\r\n  let counter:number = 0;\r\n\r\n  //initialising an empty people array of type Person\r\n  const [people, setpeople] = React.useState<Person[]>([]);\r\n\r\n  //first check if there are any people in local storage\r\n  const storedPeople: Person[] = JSON.parse(localStorage.getItem(\"people\") || 'null');\r\n\r\n  //if people are in the local storage then set the values from localstorage\r\n  React.useEffect(() => {\r\n    if (storedPeople) {\r\n      setpeople(people => storedPeople);\r\n    }\r\n  }, []);\r\n\r\n  function returnPerson(person: Person, index: number, num: number) {\r\n    if (people.length == 0) {\r\n      return <div>No contacts stored. Add new contacts to see them here.</div>\r\n    } else {\r\n      return <Contact ID={num} key={index} name={person.name} />\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n\r\n      <div>\r\n        <div>\r\n\r\n          <PreviousPage HeaderTitle=\"Address Book\" to=\"/\" />\r\n          <Contact addButton name=\"New Contact\" />\r\n\r\n\r\n          {/* if their are people in local storage render them */}\r\n          {people.length != 0 && people.map((person, index) => {\r\n            \r\n            return returnPerson(person, index, counter++)\r\n          })}\r\n\r\n          {/* if there are no people in local storage then display message */}\r\n          {people.length == 0 && <div>No contacts stored. Add new contacts to see them here.</div>\r\n          }\r\n\r\n        </div>\r\n        <Link className=\"button button__blue\" to=\"/\" type=\"button\">Disconnect</Link>\r\n\r\n\r\n      </div>\r\n  \r\n  );\r\n}\r\n","import React, { ChangeEvent, ReactElement } from \"react\";\r\nimport PreviousPage from \"../../components/PreviousPage/PreviousPage\";\r\nimport \"./NewContact.scss\";\r\nimport { useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\ninterface Props { }\r\n\r\n\r\ninterface Person {\r\n    name: string,\r\n    etherID: string,\r\n}\r\n\r\n// To handle all things contacts related\r\nexport default function NewContact({ }: Props): ReactElement {\r\n    //initialising an empty people array of type Person\r\n    const [people, setpeople] = useState<Person[]>([]);\r\n\r\n    const [form_name, setname] = useState('' as any);\r\n    const [form_EthID, setEthID] = useState('' as any);\r\n\r\n    //first check if there are any people in local storage\r\n    const storedPeople: Person[] | any = JSON.parse(localStorage.getItem(\"people\") || 'null');\r\n\r\n    //if people are in the local storage then set the values from localstorage\r\n    React.useEffect(() => {\r\n        if (storedPeople) {\r\n            setpeople(people => storedPeople);\r\n        }\r\n    }, []);\r\n\r\n    const handleNameChange = (event: any) => {\r\n        //   console.log(event.target.value);\r\n        setname(event.target.value);\r\n\r\n    }\r\n\r\n    const handleEthChange = (event: any) => {\r\n        // console.log(event.target.value);\r\n        setEthID(event.target.value);\r\n    }\r\n\r\n    const saveContact2 = (event: any) => {\r\n        // event.preventDefault();\r\n        if (form_name != '' && form_EthID != '') {\r\n            if (storedPeople) {\r\n                storedPeople[storedPeople.length] = { name: form_name, etherID: form_EthID }\r\n                setpeople(storedPeople);\r\n            } else {\r\n                // storedPeople is null meaning it doesnt exist because local storage was empty\r\n                //hence create a local stored people and initialise it\r\n                let storedPeople: Person[] = [];\r\n                storedPeople.push({ name: form_name, etherID: form_EthID });\r\n                setpeople(storedPeople);\r\n\r\n            }\r\n            console.log(people);\r\n            // localStorage.setItem(\"people\", JSON.stringify(people));\r\n            localStorage.setItem(\"people\", JSON.stringify(people));\r\n\r\n            // saveContact(event);\r\n        }\r\n    }\r\n\r\n    function saveContact(event: any) {\r\n        event.preventDefault();\r\n     \r\n        if (form_name != '' && form_EthID != '') {\r\n            if (storedPeople) {\r\n                storedPeople[storedPeople.length] = { name: form_name, etherID: form_EthID }\r\n                setpeople(storedPeople);\r\n            } else {\r\n                // storedPeople is null meaning it doesnt exist because local storage was empty\r\n                //hence create a local stored people and initialise it\r\n                let storedPeople: Person[] = [];\r\n                storedPeople.push({ name: form_name, etherID: form_EthID });\r\n                setpeople(storedPeople);\r\n                \r\n            \r\n                localStorage.setItem(\"people\", JSON.stringify(storedPeople));\r\n                return null;\r\n        \r\n            }\r\n\r\n            }\r\n                      \r\n            localStorage.setItem(\"people\", JSON.stringify(storedPeople));\r\n\r\n        }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <PreviousPage HeaderTitle=\"New Contact\" to=\"/contacts\" />\r\n\r\n            <form action=\"\" className=\"NewContact\">\r\n                <input type=\"text\" className=\"input\" placeholder=\"Name\" onChange={e => handleNameChange(e)} />\r\n                <input type=\"text\" className=\"input\" placeholder=\"Ethereum address\" onChange={e => handleEthChange(e)} />\r\n                <p className=\"NewContact__error\">Please enter a valid Ethereum address</p>\r\n\r\n                <Link to=\"#\" type=\"button\" className=\"button button__orange\" onClick={ (Event) => saveContact(Event) }>Save</Link>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport \"./SendMoney.scss\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport PreviousPage from \"../../components/PreviousPage/PreviousPage\";\r\n\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface Person {\r\n    name: string,\r\n    etherID: string,\r\n}\r\n\r\nexport default function SendMoney({ }: Props): ReactElement {\r\n\r\n    function getPhotoName({ name }: Person) {\r\n        let myArr;\r\n        try {\r\n            myArr = name.split(\" \");\r\n        } catch {\r\n            return;\r\n        }\r\n        let str: string = \"\";\r\n        myArr.forEach(element => {\r\n            str += element.substring(0, 1).toUpperCase() + \" \";\r\n        });\r\n\r\n        return str;\r\n\r\n    }\r\n\r\n    function SendClickHandler() {\r\n        //Will Start the metamask extension\r\n        // if (typeof window.ethereum: any !== 'undefined') {\r\n        //     console.log('MetaMask is installed!');\r\n        // }\r\n        // ethereum.request({ method: 'eth_requestAccounts' });\r\n    }\r\n\r\n\r\n    //first check if there are any people in local storage\r\n    const storedPeople: Person[] = JSON.parse(localStorage.getItem(\"people\") || 'null');\r\n\r\n\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n    console.log(id);\r\n\r\n    return (\r\n        <div>\r\n            <PreviousPage HeaderTitle={'Send to ' + storedPeople[parseInt(id)].name} to=\"/contacts\" />\r\n\r\n            <div className=\"profile__photo\">{getPhotoName(storedPeople[parseInt(id)])}</div>\r\n            <div className=\"profile__eth\">{storedPeople[parseInt(id)].etherID}</div>\r\n            <input className=\"input\" type=\"text\" placeholder=\"0 ETH\" />\r\n            <div className=\"profile__fee\">Tx fee: 0.00021 ETH $0.53</div>\r\n\r\n            <a href=\"#\" onClick={() => SendClickHandler()} type=\"button\" className=\"button button__orange profile__send\">Send</a>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.scss\";\r\nimport StartScreen from \"./pages/StartScreen/StartScreen\";\r\nimport Contacts from \"./pages/Contacts/Contacts\";\r\nimport NewContacts from \"./pages/NewContact/NewContact\";\r\n\r\nimport SendMoney from \"./pages/SendMoney/SendMoney\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <StartScreen />\r\n          </Route>\r\n          <Route path=\"/contacts\">\r\n            <Contacts />\r\n          </Route>\r\n          <Route path=\"/newcontact\">\r\n            <NewContacts />\r\n          </Route>\r\n\r\n          <Route path=\"/sendmoney/:id\" >\r\n            <SendMoney />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}